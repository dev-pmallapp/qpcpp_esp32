//$file${include::qp_pkg.hpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: qpcpp.qm
// File:  ${include::qp_pkg.hpp}
//
// This code has been generated by QM 6.2.3 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
//                 ____________________________________
//                /                                   /
//               /    GGGGGGG    PPPPPPPP   LL       /
//              /   GG     GG   PP     PP  LL       /
//             /   GG          PP     PP  LL       /
//            /   GG   GGGGG  PPPPPPPP   LL       /
//           /   GG      GG  PP         LL       /
//          /     GGGGGGG   PP         LLLLLLL  /
//         /___________________________________/
//
// Copyright (c) 2005 Quantum Leaps, LLC
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open-source software licensed under the GNU
// General Public License (GPL) as published by the Free Software Foundation
// (see <https://www.gnu.org/licenses>).
//
// NOTE:
// The GPL does NOT permit the incorporation of this code into proprietary
// programs. Please contact Quantum Leaps for commercial licensing options,
// which expressly supersede the GPL and are designed explicitly for licensees
// interested in retaining the proprietary status of the generated code.
//
// Quantum Leaps contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${include::qp_pkg.hpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#ifndef QP_PKG_HPP_
#define QP_PKG_HPP_

//$declare${QF::QF-pkg} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace QP {
namespace QF {

//${QF::QF-pkg::Attr} ........................................................
class Attr {
public:

#if (QF_MAX_EPOOL > 0U)
    QF_EPOOL_TYPE_ ePool_[QF_MAX_EPOOL];
#endif //  (QF_MAX_EPOOL > 0U)

#if (QF_MAX_EPOOL > 0U)
    std::uint_fast8_t maxPool_;
#endif //  (QF_MAX_EPOOL > 0U)

#if (QF_MAX_EPOOL == 0U)
    std::uint8_t dummy;
#endif //  (QF_MAX_EPOOL == 0U)
}; // class Attr

//${QF::QF-pkg::priv_} .......................................................
extern QF::Attr priv_;

//${QF::QF-pkg::bzero_} ......................................................
void bzero_(
    void * const start,
    std::uint_fast16_t const len) noexcept;

} // namespace QF
} // namespace QP
//$enddecl${QF::QF-pkg} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#define QF_CONST_CAST_(type_, ptr_) const_cast<type_>(ptr_)
#define QF_PTR_RANGE_(x_, min_, max_)  (((min_) <= (x_)) && ((x_) <= (max_)))
#define Q_UINTPTR_CAST_(ptr_) (reinterpret_cast<std::uintptr_t>(ptr_))
#define Q_ACTION_CAST(act_)   (reinterpret_cast<QP::QActionHandler>(act_))

namespace QP {

// Bitmasks are for the QTimeEvt::refCtr_ attribute (inherited from QEvt).
// In QTimeEvt this attribute is NOT used for reference counting.
constexpr std::uint8_t TE_IS_LINKED    = 1U << 7U;  // flag
constexpr std::uint8_t TE_WAS_DISARMED = 1U << 6U;  // flag
constexpr std::uint8_t TE_TICK_RATE    = 0x0FU;     // bitmask

inline void QEvt_refCtr_inc_(QEvt const * const e) noexcept {
    (QF_CONST_CAST_(QEvt*, e))->refCtr_ = e->refCtr_ + 1U;
}

inline void QEvt_refCtr_dec_(QEvt const * const e) noexcept {
    (QF_CONST_CAST_(QEvt*, e))->refCtr_ = e->refCtr_ - 1U;
}

} // namespace QP

#endif // QP_PKG_HPP_
